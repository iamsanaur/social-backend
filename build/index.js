"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/slice"));

var _graphqlSchema = require("./graphql-schema");

var _apolloServerExpress = require("apollo-server-express");

var _express = _interopRequireDefault(require("express"));

var _neo4jDriver = _interopRequireDefault(require("neo4j-driver"));

var _neo4jGraphqlJs = require("neo4j-graphql-js");

var _dotenv = _interopRequireDefault(require("dotenv"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _bcrypt = require("bcrypt");

// set environment variables from .env
_dotenv.default.config();

const app = (0, _express.default)();
/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const resolvers = {
  Mutation: {
    login: (obj, args, context, info) => {
      const session = context.driver.session();
      return session.run(`MATCH (u:User {username: $username})
          RETURN u LIMIT 1`, {
        username: args.username
      }).then(res => {
        session.close();
        const {
          id,
          username,
          password
        } = res.records[0].get('u').properties;

        if (!(0, _bcrypt.compareSync)(args.password, password)) {
          throw new Error('Authorization Error');
        }

        return {
          token: _jsonwebtoken.default.sign({
            id,
            username
          }, process.env.JWT_SECRET, {//expiresIn: '30d'
          })
        };
      });
    },
    signup: (obj, args, context, info) => {
      args.password = (0, _bcrypt.hashSync)(args.password, 10);
      const session = context.driver.session();
      return session.run(`CREATE (u:User) SET u += $args,
           u.id = randomUUID(),
            u.aq_score =$aq_score,
            u.bio =$bio,
            u.designation=$designation,
            u.firstName=$firstName,
            u.hq_score = $hq_score,
            u.iq_score= $iq_score,
            u.lastName= $lastName,
            u.profile_pic=$profile_pic,
            u.sq_score=$sq_score,
            u.userID=$userID,
            u.vibeScore=$vibeScore,
            u.workplace=$workplace
            
           RETURN u`, {
        args,
        aq_score: args.aq_score,
        bio: args.bio,
        designation: args.designation,
        firstName: args.firstName,
        hq_score: args.hq_score,
        iq_score: args.iq_score,
        lastName: args.lastName,
        profile_pic: args.profile_pic,
        sq_score: args.sq_score,
        userID: args.userID,
        vibeScore: args.vibeScore,
        workplace: args.workplace
      }).then(res => {
        session.close();
        const {
          id,
          username
        } = res.records[0].get('u').properties;
        return {
          token: _jsonwebtoken.default.sign({
            id,
            username
          }, process.env.JWT_SECRET, {// expiredIn: '30d'
          })
        };
      });
    }
  }
};
const schema = (0, _neo4jGraphqlJs.makeAugmentedSchema)({
  typeDefs: _graphqlSchema.typeDefs,
  resolvers,
  config: {
    query: {
      exclude: ['RatingCount']
    },
    mutation: {
      exclude: ['RatingCount']
    }
  }
});
/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */

const driver = _neo4jDriver.default.driver(process.env.NEO4J_URI || 'bolt://localhost:7687', _neo4jDriver.default.auth.basic(process.env.NEO4J_USER || 'neo4j', process.env.NEO4J_PASSWORD || 'neo4j'));
/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */


const server = new _apolloServerExpress.ApolloServer({
  context: ({
    req
  }) => {
    var _req$headers, _req$headers$authoriz;

    const token = req === null || req === void 0 ? void 0 : (_req$headers = req.headers) === null || _req$headers === void 0 ? void 0 : (_req$headers$authoriz = _req$headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : (0, _slice.default)(_req$headers$authoriz).call(_req$headers$authoriz, 7);
    let userId;

    if (token) {
      const decoded = _jsonwebtoken.default.verify(token, process.env.JWT_SECRET);

      userId = decoded.id;
    }

    return {
      cypherParams: {
        userId
      },
      driver,
      neo4jDatabase: process.env.NEO4J_DATABASE
    };
  },
  schema
}); // Specify host, port and path for GraphQL endpoint

const port = process.env.GRAPHQL_SERVER_PORT || 4001;
const path = process.env.GRAPHQL_SERVER_PATH || '/graphql';
const host = process.env.GRAPHQL_SERVER_HOST || '0.0.0.0';
/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */

server.applyMiddleware({
  app,
  path
});
app.listen({
  host,
  port,
  path
}, () => {
  console.log(`GraphQL server ready at http://${host}:${port}${path}`);
});